package hard;

import java.util.Arrays;

public class MinimizeMalwareSpread {
	
	public static void main(String[] args) {
		int res = minMalwareSpread(new int[][]{
				{1, 1, 0},
				{1, 1, 0},
				{0, 0, 1}
		}, new int[]{0, 1});
		System.out.println(res);
	}
	
	public static int minMalwareSpread(int[][] graph, int[] initial) {
		int n = graph.length;
		int[] parent = new int[n];
		for (int i = 0; i < n; i++) {
			parent[i] = i;
		}
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (i != j && graph[i][j] == 1) {
					union(parent, i, j);
				}
			}
		}
		int[] groupSize = new int[n];
		int[] malCount = new int[n];
		for (int i = 0; i < n; i++) {
			groupSize[find(parent, i)]++;
		}
		for (int i : initial) {
			malCount[find(parent, i)]++;
		}
		Arrays.sort(initial);
		int res = 0, max = 0;
		for (int i : initial) {
			int group = find(parent, i);
			if (groupSize[group] > max && malCount[group] == 1) {
				max = groupSize[group];
				res = i;
			}
		}
		return max > 0 ? res : initial[0];
	}
	
	private static void union(int[] parent, int i, int j) {
		parent[find(parent, i)] = find(parent, j);
	}
	
	private static int find(int[] parent, int i) {
		if (parent[i] != i) {
			parent[i] = find(parent, parent[i]);
		}
		return parent[i];
	}
	
}
